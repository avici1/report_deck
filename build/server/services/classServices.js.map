{"version":3,"sources":["../../../api/server/services/classServices.js"],"names":["classService","database","Classes","findAll","id","findOne","where","Number","ClassToFind","newClass","create","classToUpdate","update","classToDelete","destroy"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;IAEMA,Y;;;;;;;;;;;;;;;;;;;uBAGmBC,mBAASC,OAAT,CAAiBC,OAAjB,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qDAKIC,E;;;;;;;;uBAESH,mBAASC,OAAT,CAAiBG,OAAjB,CAAyB;AAC/CC,kBAAAA,KAAK,EAAE;AAACF,oBAAAA,EAAE,EAAEG,MAAM,CAACH,EAAD;AAAX;AADwC,iBAAzB,C;;;AAApBI,gBAAAA,W;;qBAGHA,W;;;;;kDACQA,W;;;kDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;;qDAKOC,Q;;;;;;;uBAEDR,mBAASC,OAAT,CAAiBQ,MAAjB,CAAwBD,QAAxB,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qDAKIL,E,EAAIK,Q;;;;;;;;uBAEOR,mBAASC,OAAT,CAAiBG,OAAjB,CAAyB;AACjDC,kBAAAA,KAAK,EAAE;AAACF,oBAAAA,EAAE,EAACG,MAAM,CAACH,EAAD;AAAV;AAD0C,iBAAzB,C;;;AAAtBO,gBAAAA,a;;qBAGHA,a;;;;;;uBACOV,mBAASC,OAAT,CAAiBU,MAAjB,CAAwBH,QAAxB,EAAiC;AAACH,kBAAAA,KAAK,EAAC;AAACF,oBAAAA,EAAE,EAACG,MAAM,CAACH,EAAD;AAAV;AAAP,iBAAjC,C;;;kDACCK,Q;;;kDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;;qDAKUL,E;;;;;;;;uBAEWH,mBAASC,OAAT,CAAiBG,OAAjB,CAAyB;AACjDC,kBAAAA,KAAK,EAAE;AAACF,oBAAAA,EAAE,EAACG,MAAM,CAACH,EAAD;AAAV;AAD0C,iBAAzB,C;;;AAAtBS,gBAAAA,a;;qBAGHA,a;;;;;;uBACOZ,mBAASC,OAAT,CAAiBY,OAAjB,CAAyB;AAACR,kBAAAA,KAAK,EAAC;AAACF,oBAAAA,EAAE,EAACG,MAAM,CAACH,EAAD;AAAV;AAAP,iBAAzB,C;;;kDACCS,a;;;kDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;eAOJb,Y","sourcesContent":["import database from '../../models';\n\nclass classService{\n    static async getAllClasses(){\n        try {\n            return await database.Classes.findAll();\n        } catch (error) {\n            throw error;\n        }\n    }\n    static async getOneClass(id){\n        try {\n            const ClassToFind = await database.Classes.findOne({\n                where: {id: Number(id)}\n            });\n            if(ClassToFind){\n                return ClassToFind;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n    static async AddClass(newClass){\n        try{\n            return await database.Classes.create(newClass);\n        }catch(error){\n            throw error;\n        }\n    }\n    static async updateClass(id, newClass){\n        try {\n            const classToUpdate = await database.Classes.findOne({\n                where: {id:Number(id)}\n            });\n            if(classToUpdate){\n                await database.Classes.update(newClass,{where:{id:Number(id)}});\n                return newClass;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n    static async deleteClass(id){\n        try {\n            const classToDelete = await database.Classes.findOne({\n                where: {id:Number(id)}\n            });\n            if(classToDelete){\n                await database.Classes.destroy({where:{id:Number(id)}});\n                return classToDelete;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n}\n\nexport default classService;"],"file":"classServices.js"}