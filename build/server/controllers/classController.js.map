{"version":3,"sources":["../../../api/server/controllers/classController.js"],"names":["util","Util","ClassController","req","res","ClassService","getAllClasses","classList","length","setSuccess","send","setError","message","body","classYear","classId","classMasterTeacher","classSection","classLevel","newClass","AddClass","addingClass","id","params","Number","classService","deleteClass","deletedClass","updated","Object","values","updateClass","updated_class","getOneClass","oneClass"],"mappings":"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","sourcesContent":["import ClassService from '../services/classServices';\nimport Util from '../utils/Util';\nimport classService from '../services/classServices';\nconst util = new Util();\n\nclass ClassController {\n    static async getListClass(req, res) {\n        try {\n            const classList = await ClassService.getAllClasses();\n            if (classList.length > 0) {\n                util.setSuccess(\"Classes Found\", 200, classList);\n\n            } else {\n                util.setSuccess(\"Classes Not Found\", 200, {});\n            }\n            return util.send(res);\n        } catch (error) {\n            util.setError(400, error.message);\n            return util.send(res);\n        }\n\n    }\n    static async addClasses(req, res) {\n        try {\n            if (!req.body.classYear || !req.body.classId || !req.body.classMasterTeacher || !req.body.classSection || !req.body.classLevel) {\n                util.setError(400, 'Please send accurate info');\n                return util.send(res);\n            } else {\n                const newClass = req.body;\n                const addingClass = await ClassService.AddClass(newClass);\n                util.setSuccess('Class added', 201, addingClass);\n                return util.send(res);\n            }\n        } catch (error) {\n            util.setError(400, error.message);\n            return util.send(res);\n        }\n    }\n    static async deleteClasses(req, res) {\n        const { id } = req.params;\n        if (!Number(id)) {\n            util.setError(404, 'Please provide a valid parameter');\n            return util.send(res);\n        } else {\n            try {\n                const deletedClass = await classService.deleteClass(id);\n                if (!deletedClass) {\n                    util.setError(404, `Class with Id ${id} not found`);\n                    return util.send(res);\n                } else {\n                    util.setSuccess(`Class with Id ${id} deleted successfully`,200,deletedClass);\n                    return util.send(res);\n                }\n\n            } catch (error) {\n                util.setError(404, `can't delete the class`);\n                return util.send(res);\n            }\n\n\n\n        }\n    }\n    static async updateClass(req,res){\n        const { id } = req.params;\n        const updated = req.body;\n        if(!Number(id)){\n            util.setError(404, 'Please provide a valid parameter');\n            return util.send(res);\n\n        }else{\n            try {\n               \n                if((Object.values(updated).length >=1) == false ){\n                    util.setError(404,`sent empty fields`);\n                    return util.send(res);\n                }else{\n                    const updated_class = await classService.updateClass(id,updated);\n                    if(!updated_class){\n                        util.setError(404,`cant update a class`);\n                        return util.send(res);\n                    }else {\n                        util.setSuccess('Classes updated successfully',200,updated_class);\n                        return util.send(res);\n                    }\n                    \n                }\n                \n            } catch (error) {\n                util.setError(404,'Oops something Went wrong cant update the book');\n                return util.send(res);\n            }\n        }\n    }\n    static async getOneClass_(req,res){\n        const { id } = req.params;\n        try {\n       \n        if(!Number(id)){\n            util.setError(404,'Please provide a valid parameter for search');\n            return util.send(res);\n        }else{\n            const oneClass = await ClassService.getOneClass(id);\n            util.setSuccess(`Class is found`,200,oneClass);\n            return util.send(res); \n        }\n       } catch (error) {\n         util.setError(404,`Can't find the class woth Id ${id}`);\n         return util.send(res);  \n       }\n    }\n}\n\nexport default ClassController;"],"file":"classController.js"}